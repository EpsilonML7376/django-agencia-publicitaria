networks:
  net:
    external: false

volumes:
  postgres-db:
    external: false

secrets:
  db-password:
    file: password.txt

services:
  db:
    image: postgres:alpine
    restart: unless-stopped
    env_file:
      - .env.db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 2s
      retries: 5
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    ports:
      - 6432:5432
    networks:
      - net

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    env_file:
      - .env.db
    ports:
      - 80:80
    depends_on:
      db:
        condition: service_healthy
    networks:
      - net

  backend:
    build: .
    command: runserver 0.0.0.0:8000
    entrypoint: python3 manage.py
    env_file:
      - .env.db
    expose:
      - "8000"
    ports:
      - "8000:8000"
    volumes:
      - ./src:/code
    depends_on:
      db:
        condition: service_healthy
    networks:
      - net

  generate:
    build: .
    user: root
    command: /bin/sh -c 'mkdir src && django-admin startproject app src'
    env_file:
      - .env.db
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/code
    networks:
      - net

  manage:
    build: .
    entrypoint: python3 manage.py
    env_file:
      - .env.db
    volumes:
      - ./src:/code
    depends_on:
      db:
        condition: service_healthy
    networks:
      - net
